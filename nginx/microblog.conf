# Nginx configuration for MicroBlog
# This file should be placed in /etc/nginx/sites-available/microblog
# and linked to /etc/nginx/sites-enabled/microblog

# Upstream backend for the MicroBlog dashboard
upstream microblog_backend {
    server 127.0.0.1:8000;
    # For load balancing across multiple instances:
    # server 127.0.0.1:8001;
    # server 127.0.0.1:8002;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=dashboard:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=static:10m rate=200r/m;

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name blog.example.com www.blog.example.com;

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name blog.example.com www.blog.example.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/blog.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/blog.example.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/blog.example.com/chain.pem;

    # SSL security settings
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Modern TLS configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'none'; frame-src 'none'; worker-src 'none'; frame-ancestors 'none'; base-uri 'self';" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout 2s;

    # Basic settings
    client_max_body_size 100M;  # Allow large file uploads
    server_tokens off;  # Hide nginx version

    # Logging
    access_log /var/log/nginx/microblog_access.log;
    error_log /var/log/nginx/microblog_error.log;

    # Root directory for static files
    root /opt/microblog/build;
    index index.html;

    # Dashboard routes (dynamic content)
    location /dashboard {
        # Rate limiting for dashboard access
        limit_req zone=dashboard burst=20 nodelay;

        # Proxy to FastAPI application
        proxy_pass http://microblog_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # WebSocket support for real-time features
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # API routes (for AJAX and API calls)
    location /api {
        # Rate limiting for API access
        limit_req zone=api burst=50 nodelay;

        # Proxy to FastAPI application
        proxy_pass http://microblog_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # API-specific headers
        add_header X-API-Version "1.0" always;

        # CORS headers (adjust as needed)
        add_header Access-Control-Allow-Origin "$scheme://$server_name" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check endpoint
    location /health {
        # Allow health checks without rate limiting
        proxy_pass http://microblog_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Quick timeouts for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;

        # Don't log health checks
        access_log off;
    }

    # Static files from build directory (blog content)
    location / {
        # Rate limiting for static content
        limit_req zone=static burst=100 nodelay;

        # Try static files first, fall back to index.html for SPA routes
        try_files $uri $uri/ $uri.html /index.html;

        # Caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # CORS for assets (if needed)
            add_header Access-Control-Allow-Origin "*";
        }

        # HTML files - shorter cache
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Vary "Accept-Encoding";
        }

        # XML files (RSS feeds, sitemaps)
        location ~* \.(xml|rss)$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Type "application/xml; charset=utf-8";
        }

        # JSON files
        location ~* \.json$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Type "application/json; charset=utf-8";
        }
    }

    # Special handling for robots.txt
    location = /robots.txt {
        try_files $uri /robots.txt;
        expires 1d;
        add_header Cache-Control "public";
    }

    # Special handling for sitemap
    location = /sitemap.xml {
        try_files $uri /sitemap.xml;
        expires 1d;
        add_header Cache-Control "public";
    }

    # Special handling for favicon
    location = /favicon.ico {
        try_files $uri /favicon.ico;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to backup and config files
    location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        internal;
    }

    location = /50x.html {
        internal;
    }
}

# Additional server block for www redirect (optional)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.blog.example.com;

    # SSL configuration (same certificates)
    ssl_certificate /etc/letsencrypt/live/blog.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/blog.example.com/privkey.pem;

    # Redirect www to non-www
    return 301 https://blog.example.com$request_uri;
}